# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: commutieserverlesss
# app and org for use with dashboard.serverless.com
# app: commutie-app
# org: partinn

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: muzammalAdmin

# you can overwrite defaults here
#  stage: dev
  region: ap-south-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: '*'
# you can define service wide environment variables here
  environment:
    DB_HOST: db_host
    DB_USER: db_user
    DB_PASSWORD: db_password
    DB_NAME: Commutie_DB
    Geo_SPATIAL_TABLE: ${self:custom.Geo_SPATIAL_TABLE}
    Commute: commute
    Commute_Waypoints: commute_waypoints
    Commute_Search_Text: commute_search_text
    Commute_images: commute_images
    Commute_Geo_Spatial: commute_geo_spatial
  
custom:
  Geo_SPATIAL_TABLE: GeoSpatialTable

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
         path: /user
         method: get
  CreateUser:
    handler: lambdas/CreateUser.handler
    events:
      - httpApi:
         path: /addUser
         method: post  

  Login:
    handler: lambdas/Login.handler
    events:
      - httpApi:
         path: /login
         method: post  

  ForgotPassword:
    handler: lambdas/ForgotPassword.handler
    events:
      - httpApi:
         path: /forgot-password
         method: post  

  UpdateUser:
    handler: lambdas/UpdateUser.handler
    events:
      - httpApi:
         path: /update-user
         method: put    
  CreateCommute:
    handler: lambdas/CreateCommute.handler
    events:
      - httpApi:
         path: /create-commute
         method: post    
  GetCommutes:
    handler: lambdas/GetCommutes.handler
    events:
      - httpApi:
         path: /commutes
         method: get             

  test:
    handler: lambdas/test.handler
    events:
      - httpApi:
         path: /test
         method: get                          
                
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

resources:
  Resources:
    GeoSpatialSearchTable:
     Type: AWS::DynamoDB::Table
     Properties:
      TableName: ${self:custom.Geo_SPATIAL_TABLE}
      AttributeDefinitions:
        - AttributeName: hashKey
          AttributeType: N
        - AttributeName: rangeKey
          AttributeType: S
        - AttributeName: geohash
          AttributeType: N
        - AttributeName: userId
          AttributeType: S          
      KeySchema:
        - AttributeName: hashKey
          KeyType: HASH
        - AttributeName: rangeKey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      LocalSecondaryIndexes:
        - IndexName: local-geohash-index
          KeySchema:
            - AttributeName: hashKey
              KeyType: HASH
            - AttributeName: geohash
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: userid-index
          KeySchema:
            - AttributeName: hashKey
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL            